# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: ubuntu-latest

variables:
  buildConfiguration: 'Release'
  azureServiceConnection: 'AzureServiceConnection'
  backendAppService: 'Project-Mongo'
  identityAppService: 'project-mongo-duendeidentity'
  frontendAppService: 'project-mongo-client'
  resourceGroupName: 'RG2'

  # Correct Azure URLs
  backendApiUrl: 'https://project-mongo-cccadrfrf9gwdfh6.canadacentral-01.azurewebsites.net'
  identityServerUrl: 'https://project-mongo-duendeidentity.azurewebsites.net'
  frontendUrl: 'https://project-mongo-client.azurewebsites.net'

steps:
  - task: UseDotNet@2
    displayName: 'Install .NET SDK'
    inputs:
      packageType: 'sdk'
      version: '7.x'  # Specify the .NET SDK version compatible with your project
      installationPath: $(Agent.ToolsDirectory)/dotnet

      # **Start MongoDB in Docker**
  - script: |
      docker run -d --name mongodb -p 27017:27017 mongo:latest
    displayName: 'Start MongoDB in Docker'

  - script: |
      echo "Waiting for MongoDB to be fully ready..."
      for i in {1..30}; do
        nc -zv localhost 27017 && echo "MongoDB is up!" && exit 0
        echo "Waiting..."
        sleep 2
      done
      echo "MongoDB did not start in time" && exit 1
    displayName: 'Wait for MongoDB (Improved)'

  # **MongoDB Debugging**
  - script: |
      docker exec mongodb mongosh --eval "db.runCommand({ ping: 1 })"
    displayName: 'Debug: MongoDB Ping Test'

  - script: dotnet restore --ignore-failed-sources --verbosity detailed
    displayName: 'Restore NuGet Packages (Debug Mode)'

  - task: DotNetCoreCLI@2
    displayName: 'Build Solution'
    inputs:
      command: 'build'
      projects: '**/*.sln'  # Builds all solution files
      # projects: 'ProjectMongoDB/ProjectMongoDB.csproj'  # Builds backend files
      arguments: '--configuration $(buildConfiguration)'

  - script: |
      docker exec mongodb mongosh --eval "show dbs"
      docker exec mongodb mongosh --eval "use testdb; show collections"
    displayName: 'Debug: Check MongoDB State'

  # **Debug: List All .csproj Files**
  - script: find $(System.DefaultWorkingDirectory) -name "*.csproj"
    displayName: 'Debug: List all .csproj files'

  - script: |
      echo "Verifying default image..."
      ls -lah $(System.DefaultWorkingDirectory)/ProjectMongoDB.IntegrationTests/wwwroot/default.jpg
    displayName: 'Debug: Check Default Image'

  - task: DotNetCoreCLI@2
    displayName: 'Run Tests'
    inputs:
      command: 'test'
      projects: '**/ProjectMongoDB.IntegrationTests.csproj'
      arguments: '--configuration $(buildConfiguration)'

  - task: PublishTestResults@2
    displayName: 'Publish Test Results'
    inputs:
      testResultsFormat: 'VSTest'
      testResultsFiles: '$(Agent.TempDirectory)/TestResults/*.trx'
      mergeTestResults: true
      failTaskOnFailedTests: true

  # **Modify appsettings.json for Blazor Client**
  - task: PowerShell@2
    displayName: 'Update appsettings.json in Blazor'
    inputs:
      targetType: 'inline'
      script: |
        $appSettingsPath = "$(System.DefaultWorkingDirectory)/ClientMongo/appsettings.json"
        $json = Get-Content -Path $appSettingsPath | ConvertFrom-Json
        $json.apiUrl = "$(backendApiUrl)"
        $json.applicationUrl = "$(frontendUrl)"
        $json.InteractiveServiceSettings.AuthorityUrl = "$(identityServerUrl)"
        $json | ConvertTo-Json -Depth 10 | Set-Content -Path $appSettingsPath

  # **Publish & Deploy Backend**
  - task: DotNetCoreCLI@2
    displayName: 'Publish Backend'
    inputs:
      command: 'publish'
      projects: 'ProjectMongoDB/ProjectMongoDB.csproj'
      arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)/Backend'
      zipAfterPublish: true

  - task: AzureWebApp@1
    displayName: 'Deploy Backend'
    inputs:
      azureSubscription: $(azureServiceConnection)
      appType: 'webApp'
      appName: $(backendAppService)
      package: $(Build.ArtifactStagingDirectory)/Backend/*.zip
      deploymentMethod: 'runFromPackage'

  # **Publish & Deploy Identity Server**
  - task: DotNetCoreCLI@2
    displayName: 'Publish Identity Server'
    inputs:
      command: 'publish'
      projects: 'DuendeIdentityServer/DuendeIdentityServer.csproj'
      arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)/IdentityServer'
      zipAfterPublish: true

  - task: AzureWebApp@1
    displayName: 'Deploy Identity Server'
    inputs:
      azureSubscription: $(azureServiceConnection)
      appType: 'webApp'
      appName: $(identityAppService)
      package: $(Build.ArtifactStagingDirectory)/IdentityServer/*.zip
      deploymentMethod: 'runFromPackage'

  # **Publish & Deploy Blazor Client**
  - task: DotNetCoreCLI@2
    displayName: 'Publish Blazor Client'
    inputs:
      command: 'publish'
      projects: 'ClientMongo/ClientMongo.csproj'
      arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)/Client'
      zipAfterPublish: true

  - task: AzureWebApp@1
    displayName: 'Deploy Blazor Client'
    inputs:
      azureSubscription: $(azureServiceConnection)
      appType: 'webApp'
      appName: $(frontendAppService)
      package: $(Build.ArtifactStagingDirectory)/Client/*.zip
      deploymentMethod: 'runFromPackage'





